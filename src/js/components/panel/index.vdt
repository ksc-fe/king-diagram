import {Collapse, CollapseItem} from 'kpc/components/collapse';
import Checkbox from 'kpc/components/checkbox';
import {Select, Option} from 'kpc/components/select';
import Radio from 'kpc/components/radio';
import Icon from 'kpc/components/icon';
import Button, {ButtonGroup} from 'kpc/components/button';
import KdIcon from '../icon';
import Spinner from 'kpc/components/spinner';
import Colorpicker from 'kpc/components/colorpicker';
import mx from '../../mxgraph';
import {arrows} from './arrows';

const {mxConstants} = mx;
const {show, state, isEditing} = self.get();
const textAlign = isEditing ? self.get('cssStyle.align') : self.get('state.style.align');
const verticalAlign = self.get('state.style.verticalAlign');
const strokeColor = self._getStrokeColor();
const fontStyle = self.get('state.style.fontStyle', 0);
const fillColor = self.get('state.style.fillColor');

const showStroke = strokeColor !== undefined && strokeColor !== 'none';
const showFill = !!self.get('state.fill') && fillColor !== undefined && fillColor !== 'none';
const strokeStyle = self._getStrokeStyle();
const lineShape = self._getLineShape();
const edgeStyle = self._getEdgeStyle();

<div class={{ {'kd-panel': true, 'hide': !show} }}>
    <div class="collapse-wrapper">
        <Collapse noBorder v-model="expandedKeys">
            <CollapseItem title="样式" disabled={{ !state || isEditing }} value="style">
                <div class="item" v-if={{ 
                    !self.get('state.containsLabel') &&
                    (!self.get('state.containsImage') || self.get('state.style.shape') === 'image') 
                }}>
                    <Checkbox value={{ showFill }}
                        ev-$change:value={{ self._toggleColor.bind(self, 'fillColor', '#ffffff', showFill) }}
                        disabled={{ !self.get('state.fill') }}
                    >填充</Checkbox>
                    <Colorpicker value={{ fillColor || '#ffffff' }} size="small" 
                        ev-$change:value={{ self._setFillOrStrokeColor.bind(self, 'fillColor') }}
                        ref="fillColor"
                        disabled={{ !showFill }}
                    />
                </div>
                <div class="item">
                    <div class="c-clearfix">
                        <Checkbox value={{ showStroke }}
                            ev-$change:value={{ self._toggleColor.bind(self, 'strokeColor', '#000000', showStroke) }}
                        >线</Checkbox>
                        <Colorpicker value={{ strokeColor || '#000000' }} size="small" 
                            ev-$change:value={{ self._setFillOrStrokeColor.bind(self, 'strokeColor') }}
                            ref="strokeColor"
                            disabled={{ !showStroke }}
                        />
                    </div>
                    <div class="c-clearfix extra-item">
                        <Select size="small" width="120" value={{ strokeStyle }}
                            ev-$change:value={{ self._setStrokeStyle.bind(self, strokeStyle) }}
                            disabled={{ !showStroke }}
                        >
                            <Option v-for={{ ['solid', 'dashed', 'dotted'] }}
                                value={{ value }}
                                label={{ value }}
                            >
                                <div class="line-style" style={{ {borderBottom: `1px ${value} #000`} }}></div>
                            </Option>
                            <b:value params="value">
                                <div style={{ {borderBottom: `1px ${value} #666`} }} class="line"></div>
                            </b:value>
                        </Select>
                        <Spinner vertical size="small" 
                            value={{ self.get('state.style.strokeWidth', 1) }}
                            min={{ 1 }}
                            suffix="pt"
                            ev-$change:value={{ self._setStyle.bind(self, 'strokeWidth') }}
                            disabled={{ !showStroke }}
                        />
                    </div>
                </div>
                <div class="item" v-if={{ !self.get('state.edges.length') || self.get('state.vertices.length') }}>
                    <Checkbox value={{ self.get('state.style.rounded') === 1 }}
                        ev-$change:value={{ self._setRounded }}
                    >圆角</Checkbox>
                </div>
                <template v-else>
                    <div class="item">
                        <div class="c-clearfix extra-item">
                            <Select size="small" width="120" value={{ lineShape }}
                                ev-$change:value={{ self._setLineShape.bind(self, lineShape) }}
                                disabled={{ !lineShape }}
                            >
                                <Option v-for={{ ['line', 'link', 'flexArrow', 'arrow'] }}
                                    value={{ value }}
                                    label={{ value }}
                                >
                                    <Icon class="iconfont kd-shuangshixian" />
                                </Option>
                                <b:value params="value">
                                    <div class={{ 'iconfont kd-' + value }}>{{ value }}</div>
                                </b:value>
                            </Select>
                            <Select size="small" width="69" 
                                value={{ edgeStyle }}
                                ev-$change:value={{ self._setEdgeStyle.bind(self, edgeStyle) }}
                                disabled={{ !edgeStyle }}
                                class="edge-style right"
                            >
                                <Option 
                                    v-for={{ [
                                        'straight', 'orthogonal', 'horizontalElbow', 'verticalElbow',
                                        'horizontalIsometric', 'verticalIsometric', 'curved', 'entity',
                                    ] }}
                                    value={{ value }}
                                    label={{ value }}
                                >
                                    <div class={{ 'edge-style-item edge-' + value }}></div>
                                </Option>
                                <b:value params="value">
                                    <div class={{ 'edge-style-item edge-' + value }}></div>
                                </b:value>
                            </Select>
                        </div>
                        <div class="c-clearfix extra-item">
                            <div class="label">起点箭头</div>
                            <Select size="small" width="100" class="right"
                                ev-$change:value={{ self._setStartArrow }}
                            >
                                <Option v-for={{ arrows }} value={{ key }}>
                                    <div v-if={{ key !== 'none' }} class={{ "arrow-shape arrow-" + key }}></div>
                                    <div class="c-center">无</div>
                                </Option>
                            </Select>
                        </div>
                        <div class="c-clearfix extra-item">
                            <div class="label">终点箭头</div>
                            <Select size="small" width="100" class="right"
                                ev-$change:value={{ self._setEndArrow }}
                            >
                                <Option v-for={{ arrows }} value={{ key }}>
                                    <div v-if={{ key !== 'none' }} class={{ "arrow-end arrow-shape arrow-" + key }}></div>
                                    <div class="c-center">无</div>
                                </Option>
                            </Select>
                        </div>
                    </div>
                </template>
            </CollapseItem>
            <CollapseItem title="文本" disabled={{ !state }} value="text">
                <Select fluid size="small" 
                    value={{ !isEditing ? 
                        self.get('state.style.fontFamily') :
                        self.get('cssStyle.fontFamily')
                    }}
                    ev-$change:value={{ self._setFontFamily }}
                    ev-mousedown={{ self._preventDefault }}
                    ref="fontFamily"
                    allowUnmatch
                >
                    <Option value="Helvetica">Helvetica</Option>
                    <Option value="Microsoft Yahei">Microsoft Yahei</Option>
                    <Option value="Monospace">Monospace</Option>
                </Select>
                <div class="row">
                    <Button type="none" icon
                        v-for={{ ['BOLD', 'ITALIC', 'UNDERLINE'] }}
                        class={{ {
                            active: !isEditing ? 
                                (fontStyle & mxConstants[`FONT_${value}`]) === mxConstants[`FONT_${value}`] :
                                self.get(`cssStyle.${value.toLowerCase()}`)
                        } }}
                        ev-click={{ self._toggleFontStyle.bind(self, value) }}
                    >
                        <KdIcon class={{ value.toLowerCase() }} size={{ value === 'UNDERLINE' ? 14 : 30 }} />
                    </Button>
                    <div class="font-size">
                        大小
                        <Spinner vertical size="small"
                            value={{ !isEditing ? self.get('state.style.fontSize', 12) : self.get('cssStyle.fontSize') }}
                            min={{ 1 }}
                            suffix="pt"
                            ev-change={{ self._setFontSize }}
                            ref="fontSize"
                        />
                    </div>
                </div>
                <div class="row">
                    <Button type="none" icon 
                        v-for={{ ['left', 'center', 'right'] }}
                        class={{ {active: textAlign === value} }}
                        ev-click={{ self._setAlign.bind(self, 'align', value) }}
                    >
                        <KdIcon class={{ `text-${value}` }} size="30" />
                    </Button>
                    <Button type="none" icon 
                        v-for={{ ['top', 'middle', 'bottom'] }}
                        class={{ {active: verticalAlign === value} }}
                        ev-click={{ self._setAlign.bind(self, 'verticalAlign', value) }}
                    >
                        <KdIcon class={{ `text-${value}` }} size={{ value === 'middle' ? 16 : 30 }} />
                    </Button>
                </div>
                <div class="row whole">
                    <div class="label">字体颜色</div>
                    <Colorpicker 
                        value={{ !isEditing ? 
                            self.get('state.style.fontColor', '#000000') :
                            self.get('cssStyle.color', '#000000')
                        }} 
                        size="small" 
                        ev-$change:value={{ self._setFontColor }}
                        ev-mousedown={{ self._preventDefault }}
                        ref="fontColor"
                    />
                </div>
            </CollapseItem>
            <CollapseItem title="布局" disabled={{ !state || isEditing }} value="layout" class="layout-panel">
                <Button 
                    v-for={{ [
                        {name: '圆形', value: 'circle'},
                        {name: '树形', value: 'tree'},
                        {name: '放射', value: 'radial'},
                        {name: '垂直', value: 'vertical'},
                        {name: '水平', value: 'horizontal'},
                    ] }}
                    fluid
                    size="small" 
                    disabled={{ self.get('state.vertices.length', 0) < 2 && value.value !== 'circle' }}
                    ev-click={{ self._layoutCells.bind(self, value.value) }}
                >{{ value.name }}</Button>
            </CollapseItem>
        </Collapse>
    </div>
    <div class="expand-shrink" ev-click={{ self._toggle }}>
        <Icon class="ion-android-arrow-dropright" />
    </div>
</div>
